เขียน program สำหรับการ Train Multilayer Perceptron โดยใช้ Genetic Algorithms รายงานจะต้องประกอบไปด้วย

            1. ลักษณะการทำงานของระบบ

            2. simulation ของระบบ ผลการทดลอง และวิเคราะห์

            3 โปรแกรม

ให้ทำการทดลองกับ wdbc.data (Wisconsin Diagnostic Breast Cancer (WDBC) จาก UCI Machine learning Repository) โดยที่ data set นี้ มี 2 classes และ 30 features ซึ่งในแต่ละ sample จะมีทั้งหมด 32 ค่าโดยที่

1) ID number

2) Diagnosis (M = malignant, B = benign) à class

3-32) เป็นค่า features ทั้ง 30

ให้ทำการทดลองโดยใช้ 10% cross validation เพื่อทดสอบ validity ของ network ที่ได้ และให้ทำการเปลี่ยนแปลงจำนวน hidden layer และ nodes

โปรแกรมนี้ใช้ Genetic Algorithm (GA) เพื่อฝึก Multilayer Perceptron (MLP) ในการจำแนกประเภทข้อมูลจากชุดข้อมูล WDBC โดย MLP จะมีการปรับค่า weights และ biases ตามกลไกการคัดเลือกทางพันธุกรรมใน GA และใช้ฟังก์ชันการสูญเสีย Mean Squared Error (MSE) เป็นตัวชี้วัดเพื่อหาค่า weights และ biases ที่ให้ผลลัพธ์ที่ดีที่สุด

การเตรียมข้อมูล:

โหลดข้อมูล wdbc.data จาก UCI repository แล้วแปลงข้อมูลให้อยู่ในรูปแบบที่เหมาะสมกับ MLP
เลือก 10% cross validation เพื่อแบ่งข้อมูลออกเป็นชุดฝึกและชุดทดสอบ
โครงสร้างของ MLP:

สร้าง MLP ที่มีหนึ่งชั้นซ่อน (hidden layer) และจำนวน nodes สามารถกำหนดได้
ใช้ Sigmoid activation function ใน hidden layer และ output layer
Genetic Algorithm (GA):

GA จะทำการสร้างประชากรของแต่ละโครงข่าย (individuals) โดยแต่ละ individuals จะมีค่าที่ต่างกันใน weights และ biases ของ MLP
ใช้กลไกการ crossover, mutation และ selection เพื่อพัฒนาโครงข่ายไปเรื่อยๆ จนกว่าจะถึงค่าที่เหมาะสมที่สุด

1. การเตรียมข้อมูล
โค้ดส่วนนี้จัดเตรียมชุดข้อมูล WDBC ให้พร้อมสำหรับการประมวลผลของ MLP
2. ฟังก์ชันช่วยเหลือสำหรับการเตรียมข้อมูล
ฟังก์ชัน encode_labels
แปลงคลาสจากอักษร M (Malignant) และ B (Benign) ไปเป็นตัวเลข 1 และ 0 ตามลำดับ เพื่อให้ง่ายต่อการประมวลผลของ MLP
ฟังก์ชัน standardize
ทำการปรับขนาดข้อมูล (Standardize) เพื่อให้ค่าของแต่ละฟีเจอร์มีค่าเฉลี่ยเป็นศูนย์และมีส่วนเบี่ยงเบนมาตรฐานเป็นหนึ่ง ซึ่งช่วยปรับสมดุลให้กับแต่ละฟีเจอร์ในข้อมูลและทำให้การเรียนรู้มีประสิทธิภาพขึ้น
ฟังก์ชัน train_test_split
ทำหน้าที่แบ่งข้อมูลเป็นชุดฝึก (Train) และทดสอบ (Test) โดยใช้ test_size กำหนดสัดส่วนของชุดทดสอบ
ฟังก์ชัน mean_squared_error
คำนวณค่า Mean Squared Error (MSE) ระหว่างค่าที่ทำนายและค่าจริง ใช้เป็นตัววัดผลสำหรับ Genetic Algorithm
3. การสร้างโครงข่ายประสาทเทียม (MLP)
คลาส MLP
ส่วนนี้สร้างคลาส MLP ที่มีฟังก์ชันสำหรับการสร้างโครงข่ายประสาทเทียม การกำหนดค่าเริ่มต้นของน้ำหนักและอคติ (bias) และการทำนายผลลัพธ์โดยใช้ Sigmoid Activation Function
weights_input_hidden และ weights_hidden_output เป็นน้ำหนักที่เชื่อมต่อระหว่างชั้นอินพุตกับชั้นซ่อน และชั้นซ่อนกับชั้นเอาต์พุตตามลำดับ
bias_hidden และ bias_output เป็นค่าอคติสำหรับชั้นซ่อนและชั้นเอาต์พุตตามลำดับ
ฟังก์ชัน forward
ทำการฟอร์เวิร์ดพาสสำหรับข้อมูลอินพุต X และส่งผลลัพธ์ออกมาจากโครงข่าย
4. Genetic Algorithm (GA)
คลาส GeneticAlgorithm
คลาสนี้สร้างและดำเนินการ Genetic Algorithm เพื่อค้นหาค่า weights และ biases ที่ดีที่สุด
pop_size ขนาดของประชากร
mutation_rate อัตราการกลายพันธุ์
generations จำนวนรุ่นที่จะให้ GA ทำงาน
ฟังก์ชัน initialize_population
กำหนดค่าเริ่มต้นให้กับประชากรซึ่งในที่นี้คือกลุ่มของ individuals ที่ประกอบไปด้วย weights และ biases สำหรับ MLP
ฟังก์ชัน evolve
ดำเนินการ GA โดยการคัดเลือก individuals ที่ดีที่สุด (selection) ทำการผสมพันธุ์ (crossover) และกลายพันธุ์ (mutation) ต่อเนื่องกันในแต่ละรุ่น
การเลือก (selection): เลือก individuals ที่มีคะแนนความเหมาะสมต่ำสุด
การผสมพันธุ์ (crossover): ผสมค่า weights และ biases ของ individuals ที่ถูกเลือกเพื่อสร้างลูกใหม่
การกลายพันธุ์ (mutation): เปลี่ยนแปลงค่าในบางตำแหน่งของ weights เพื่อเพิ่มความหลากหลายให้ประชากร
ฟังก์ชัน objective
ฟังก์ชันคำนวณค่า Mean Squared Error (MSE) ซึ่งใช้เป็นเกณฑ์การวัดความเหมาะสมของแต่ละ individual
5. การทดสอบ MLP หลังจาก GA หาค่า weights และ biases ที่ดีที่สุด
โค้ดส่วนนี้ใช้ MLP ทำนายผลลัพธ์สำหรับชุดทดสอบ (Test Set) โดยใช้ weights ที่ได้จาก GA และแสดงค่า MSE ของชุดทดสอบเพื่อประเมินประสิทธิภาพของโครงข่าย
6. การแสดงผลกราฟ
แสดงกราฟของค่า MSE ที่ลดลงในแต่ละรุ่นของ GA เพื่อแสดงถึงการปรับปรุงค่า weights ของโครงข่าย MLP ที่ GA ค้นพบในแต่ละรุ่น
